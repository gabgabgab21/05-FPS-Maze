[gd_scene load_steps=34 format=2]

[ext_resource path="res://Player/Player.gd" type="Script" id=1]
[ext_resource path="res://Key/key.tscn" type="PackedScene" id=2]
[ext_resource path="res://Exit/Exit.gd" type="Script" id=3]
[ext_resource path="res://UI/Menu.tscn" type="PackedScene" id=4]
[ext_resource path="res://Enemy/Enemy.tscn" type="PackedScene" id=5]
[ext_resource path="res://Assets/341695__projectsu012__coins-1.wav" type="AudioStream" id=6]
[ext_resource path="res://Assets/Prórroga de Tiempo C.ogg" type="AudioStream" id=7]
[ext_resource path="res://Assets/316270__littlerobotsoundfactory__robot1_06.wav" type="AudioStream" id=8]
[ext_resource path="res://UI/Brick.gdshader" type="Shader" id=9]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 100, 50 )

[sub_resource type="Shader" id=23]
code = "/*
	木目シェーダー by あるる（きのもと 結衣）
	Grain Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type spatial;
// render_mode;

uniform vec4 light_color : hint_color = vec4( 0.9529411764705882, 0.8588235294117647, 0.7490196078431373, 1.0 );
uniform vec4 dark_color : hint_color = vec4( 0.7490196078431373, 0.6196078431372549, 0.49019607843137253, 1.0 );

uniform float ring_scale = 4.4;
uniform float wave_scale = 8.454;
uniform float random_scale = 4.6;
uniform float noise_scale = 0.03;

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}

float value_noise( vec2 pos )
{
	vec2 p = floor( pos );
	vec2 f = fract( pos );

	float v00 = random( p + vec2( 0.0, 0.0 ) ).x;
	float v10 = random( p + vec2( 1.0, 0.0 ) ).x;
	float v01 = random( p + vec2( 0.0, 1.0 ) ).x;
	float v11 = random( p + vec2( 1.0, 1.0 ) ).x;

	vec2 u = f * f * ( 3.0 - 2.0 * f );

	return mix( mix( v00, v10, u.x ), mix( v01, v11, u.x ), u.y );
}

void fragment( )
{
	vec2 shift_uv = UV;
	shift_uv.x += value_noise( UV * random_scale );
	float x = shift_uv.x + sin( shift_uv.y * wave_scale );
	float f = mod( x * ring_scale + random( UV ).x * noise_scale, 1.0 );

	ALBEDO = mix( light_color, dark_color, f ).rgb;
	ALPHA = mix( light_color, dark_color, f ).a;
}"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 23 )
shader_param/light_color = Color( 0.866667, 0.713726, 0.654902, 1 )
shader_param/dark_color = Color( 0.360784, 0.101961, 0.0352941, 1 )
shader_param/ring_scale = 0.5
shader_param/wave_scale = 12.0
shader_param/random_scale = 10.0
shader_param/noise_scale = 0.02

[sub_resource type="ConvexPolygonShape" id=3]
points = PoolVector3Array( -50, 0, -25, -50, 0, 25, 50, 0, -25, 50, 0, 25 )

[sub_resource type="SphereShape" id=6]
radius = 0.5

[sub_resource type="CubeMesh" id=7]
size = Vector3( 100, 6, 1 )

[sub_resource type="ShaderMaterial" id=18]
shader = ExtResource( 9 )
shader_param/noise_scale = 100.0
shader_param/brick_shift = 1.0
shader_param/brick_factor = 100.0
shader_param/brick_scale = Vector2( 100, 50 )
shader_param/brick_color = Color( 0.745098, 0.341176, 0.219608, 1 )
shader_param/brick_color2 = Color( 0.368627, 0.121569, 0.0392157, 1 )
shader_param/mortar_joint_color = Color( 0.368627, 0.121569, 0.0392157, 1 )

[sub_resource type="ConvexPolygonShape" id=9]
points = PoolVector3Array( 50, 3, 0.5, 50, 3, -0.5, -50, 3, 0.5, 50, -3, 0.5, 50, -3, -0.5, -50, 3, -0.5, -50, -3, 0.5, -50, -3, -0.5 )

[sub_resource type="Shader" id=19]
code = "/*
	煉瓦シェーダー by あるる（きのもと 結衣） @arlez80
	Brick Shader by Yui Kinomoto

	MIT License
*/
shader_type spatial;

const vec3 MONOCHROME_SCALE = vec3( 0.298912, 0.586611, 0.114478 );

uniform float noise_scale = 700.0;
uniform float brick_shift = 1.6;
uniform float brick_factor = 12.0;
uniform vec2 brick_scale = vec2( 50.0, 100.0 );
uniform vec4 brick_color : hint_color = vec4( 0.7450980392156863, 0.3411764705882353, 0.2196078431372549, 1.0 );
uniform vec4 brick_color2 : hint_color = vec4( 0.37, 0.12, 0.04, 1.0 );
uniform vec4 mortar_joint_color : hint_color = vec4( 1.0, 0.98777, 0.9877777, 1.0 );

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}


vec2 value_noise( vec2 pos )
{
	vec2 p = floor( pos );
	vec2 f = fract( pos );

	vec2 v00 = random( p + vec2( 0.0, 0.0 ) );
	vec2 v10 = random( p + vec2( 1.0, 0.0 ) );
	vec2 v01 = random( p + vec2( 0.0, 1.0 ) );
	vec2 v11 = random( p + vec2( 1.0, 1.0 ) );

	vec2 u = f * f * ( 3.0 - 2.0 * f );

	return mix( mix( v00, v10, u.x ), mix( v01, v11, u.x ), u.y );
}

vec3 gen_brick_color( vec2 uv, float noise )
{
	uv.x += float( 0.0 < sin( uv.y ) ) * brick_shift;
	float joint_weight = clamp( abs( sin( uv.y ) ) * abs( sin( uv.x ) ) * brick_factor + random( uv ).x * noise, 0.0, 1.0 );
	float color_select = random( floor( uv / 3.1415926535 ) ).x;

	return mix( mortar_joint_color, mix( brick_color, brick_color2, color_select ), joint_weight ).rgb;
}


vec2 noise_tex( vec2 uv )
{
	return (
		value_noise( uv * 0.984864 ) * 0.5
	+	value_noise( uv * 2.543 ) * 0.25
	+	value_noise( uv * 9.543543 ) * 0.125
	+	value_noise( uv * 21.65436 ) * 0.0625
	+	value_noise( uv * 42.0 ) * 0.03125
	+	value_noise( uv * 87.135148 ) * 0.015625
	+	value_noise( uv * 340.66534654 ) * 0.0078125
	);
}

void fragment( )
{
	vec2 uv = UV * brick_scale;

	float c[9];
	vec2 pixel_size = vec2( 0.1, 0.1 );

	for( int y=0; y<3; y ++ ) {
		for( int x=0; x<3; x ++ ) {
			vec2 v = uv + vec2( float(x-1), float(y-1) ) * pixel_size;
			vec2 nv = UV * noise_scale + vec2( float(x-1), float(y-1) ) * pixel_size;
			c[y*3+x] = length( noise_tex( nv ) ) + dot( gen_brick_color( v, 0.15 ), MONOCHROME_SCALE );
		}
	}

	vec2 sobel_filter = clamp(
		vec2(
			(
				c[0] * -1.0
			+	c[3] * -2.0
			+	c[6] * -1.0
			+	c[2] * 1.0
			+	c[5] * 2.0
			+	c[8] * 1.0
			)
		,	(
				c[0] * -1.0
			+	c[1] * -2.0
			+	c[2] * -1.0
			+	c[6] * 1.0
			+	c[7] * 2.0
			+	c[8] * 1.0
			)
		)
	,	vec2( -1.0, -1.0 )
	,	vec2( 1.0, 1.0 )
	) * 0.5;

	NORMALMAP = normalize( vec3( sobel_filter.x + 0.5, -sobel_filter.y + 0.5, 1.0 ) );
	ALBEDO = gen_brick_color( uv, 0.3 );
	ROUGHNESS = 0.95;
	METALLIC = 0.0;
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/noise_scale = 100.0
shader_param/brick_shift = 1.0
shader_param/brick_factor = 100.0
shader_param/brick_scale = Vector2( 100, 50 )
shader_param/brick_color = Color( 0.745098, 0.341176, 0.219608, 1 )
shader_param/brick_color2 = Color( 0.37, 0.12, 0.04, 1 )
shader_param/mortar_joint_color = Color( 0.368627, 0.121569, 0.0392157, 1 )

[sub_resource type="ConvexPolygonShape" id=10]
points = PoolVector3Array( 50, 3, 0.5, 50, 3, -0.5, -50, 3, 0.5, 50, -3, 0.5, 50, -3, -0.5, -50, 3, -0.5, -50, -3, 0.5, -50, -3, -0.5 )

[sub_resource type="Shader" id=15]
code = "/*
	煉瓦シェーダー by あるる（きのもと 結衣） @arlez80
	Brick Shader by Yui Kinomoto

	MIT License
*/
shader_type spatial;

const vec3 MONOCHROME_SCALE = vec3( 0.298912, 0.586611, 0.114478 );

uniform float noise_scale = 700.0;
uniform float brick_shift = 1.6;
uniform float brick_factor = 12.0;
uniform vec2 brick_scale = vec2( 50.0, 100.0 );
uniform vec4 brick_color : hint_color = vec4( 0.7450980392156863, 0.3411764705882353, 0.2196078431372549, 1.0 );
uniform vec4 brick_color2 : hint_color = vec4( 0.37, 0.12, 0.04, 1.0 );
uniform vec4 mortar_joint_color : hint_color = vec4( 1.0, 0.98777, 0.9877777, 1.0 );

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}


vec2 value_noise( vec2 pos )
{
	vec2 p = floor( pos );
	vec2 f = fract( pos );

	vec2 v00 = random( p + vec2( 0.0, 0.0 ) );
	vec2 v10 = random( p + vec2( 1.0, 0.0 ) );
	vec2 v01 = random( p + vec2( 0.0, 1.0 ) );
	vec2 v11 = random( p + vec2( 1.0, 1.0 ) );

	vec2 u = f * f * ( 3.0 - 2.0 * f );

	return mix( mix( v00, v10, u.x ), mix( v01, v11, u.x ), u.y );
}

vec3 gen_brick_color( vec2 uv, float noise )
{
	uv.x += float( 0.0 < sin( uv.y ) ) * brick_shift;
	float joint_weight = clamp( abs( sin( uv.y ) ) * abs( sin( uv.x ) ) * brick_factor + random( uv ).x * noise, 0.0, 1.0 );
	float color_select = random( floor( uv / 3.1415926535 ) ).x;

	return mix( mortar_joint_color, mix( brick_color, brick_color2, color_select ), joint_weight ).rgb;
}


vec2 noise_tex( vec2 uv )
{
	return (
		value_noise( uv * 0.984864 ) * 0.5
	+	value_noise( uv * 2.543 ) * 0.25
	+	value_noise( uv * 9.543543 ) * 0.125
	+	value_noise( uv * 21.65436 ) * 0.0625
	+	value_noise( uv * 42.0 ) * 0.03125
	+	value_noise( uv * 87.135148 ) * 0.015625
	+	value_noise( uv * 340.66534654 ) * 0.0078125
	);
}

void fragment( )
{
	vec2 uv = UV * brick_scale;

	float c[9];
	vec2 pixel_size = vec2( 0.1, 0.1 );

	for( int y=0; y<3; y ++ ) {
		for( int x=0; x<3; x ++ ) {
			vec2 v = uv + vec2( float(x-1), float(y-1) ) * pixel_size;
			vec2 nv = UV * noise_scale + vec2( float(x-1), float(y-1) ) * pixel_size;
			c[y*3+x] = length( noise_tex( nv ) ) + dot( gen_brick_color( v, 0.15 ), MONOCHROME_SCALE );
		}
	}

	vec2 sobel_filter = clamp(
		vec2(
			(
				c[0] * -1.0
			+	c[3] * -2.0
			+	c[6] * -1.0
			+	c[2] * 1.0
			+	c[5] * 2.0
			+	c[8] * 1.0
			)
		,	(
				c[0] * -1.0
			+	c[1] * -2.0
			+	c[2] * -1.0
			+	c[6] * 1.0
			+	c[7] * 2.0
			+	c[8] * 1.0
			)
		)
	,	vec2( -1.0, -1.0 )
	,	vec2( 1.0, 1.0 )
	) * 0.5;

	NORMALMAP = normalize( vec3( sobel_filter.x + 0.5, -sobel_filter.y + 0.5, 1.0 ) );
	ALBEDO = gen_brick_color( uv, 0.3 );
	ROUGHNESS = 0.95;
	METALLIC = 0.0;
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/noise_scale = 100.0
shader_param/brick_shift = 1.0
shader_param/brick_factor = 100.0
shader_param/brick_scale = Vector2( 100, 50 )
shader_param/brick_color = Color( 0.745098, 0.341176, 0.219608, 1 )
shader_param/brick_color2 = Color( 0.37, 0.12, 0.04, 1 )
shader_param/mortar_joint_color = Color( 0.368627, 0.121569, 0.0392157, 1 )

[sub_resource type="CubeMesh" id=8]
material = SubResource( 16 )
size = Vector3( 1, 6, 50 )

[sub_resource type="ConvexPolygonShape" id=11]
points = PoolVector3Array( -0.5, -3, -25, 0.5, -3, -25, -0.5, -3, 25, -0.5, 3, -25, 0.5, 3, -25, 0.5, -3, 25, -0.5, 3, 25, 0.5, 3, 25 )

[sub_resource type="ConvexPolygonShape" id=12]
points = PoolVector3Array( -0.5, -3, -25, 0.5, -3, -25, -0.5, -3, 25, -0.5, 3, -25, 0.5, 3, -25, 0.5, -3, 25, -0.5, 3, 25, 0.5, 3, 25 )

[sub_resource type="SpatialMaterial" id=25]
albedo_color = Color( 0.533333, 0.243137, 0.141176, 1 )

[sub_resource type="SpatialMaterial" id=26]
albedo_color = Color( 0.533333, 0.243137, 0.141176, 1 )

[sub_resource type="SpatialMaterial" id=27]
albedo_color = Color( 0.533333, 0.243137, 0.141176, 1 )

[sub_resource type="SpatialMaterial" id=28]
albedo_color = Color( 0.533333, 0.243137, 0.141176, 1 )

[sub_resource type="SpatialMaterial" id=29]
albedo_color = Color( 0.533333, 0.243137, 0.141176, 1 )

[sub_resource type="SpatialMaterial" id=24]
albedo_color = Color( 0.533333, 0.243137, 0.141176, 1 )

[sub_resource type="CapsuleShape" id=4]
radius = 0.5
height = 1.5

[sub_resource type="BoxShape" id=5]
extents = Vector3( 0.5, 0.1, 0.5 )

[node name="Game" type="Spatial"]

[node name="Maze" type="Spatial" parent="."]

[node name="Ground" type="StaticBody" parent="Maze"]

[node name="MeshInstance" type="MeshInstance" parent="Maze/Ground"]
mesh = SubResource( 1 )
material/0 = SubResource( 22 )

[node name="CollisionShape" type="CollisionShape" parent="Maze/Ground"]
shape = SubResource( 3 )

[node name="key" parent="Maze" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 49, 0, 24 )

[node name="Exit" type="Area" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 49, 0, -24 )
script = ExtResource( 3 )

[node name="Light" type="OmniLight" parent="Maze/Exit"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.01132, 0 )
light_color = Color( 1, 0, 0, 1 )
light_energy = 10.0
omni_range = 3.0
omni_attenuation = 2.0

[node name="CollisionShape" type="CollisionShape" parent="Maze/Exit"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.325404, 0 )
shape = SubResource( 6 )

[node name="Walls" type="StaticBody" parent="Maze"]

[node name="MeshInstance" type="MeshInstance" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, 25 )
mesh = SubResource( 7 )
material/0 = SubResource( 18 )

[node name="CollisionShape" type="CollisionShape" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, 25 )
shape = SubResource( 9 )

[node name="MeshInstance2" type="MeshInstance" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, -25 )
mesh = SubResource( 7 )
material/0 = SubResource( 20 )

[node name="CollisionShape2" type="CollisionShape" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, -25 )
shape = SubResource( 10 )

[node name="MeshInstance3" type="MeshInstance" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -50, 3, 0 )
mesh = SubResource( 8 )

[node name="CollisionShape3" type="CollisionShape" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -50, 3, 0 )
shape = SubResource( 11 )

[node name="MeshInstance4" type="MeshInstance" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 50, 3, 0 )
mesh = SubResource( 8 )

[node name="CollisionShape4" type="CollisionShape" parent="Maze/Walls"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 50, 3, 0 )
shape = SubResource( 12 )

[node name="CSGBox2" type="CSGBox" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 12, 3, 3.61286 )
use_collision = true
width = 1.0
height = 6.0
depth = 42.0
material = SubResource( 25 )

[node name="CSGBox4" type="CSGBox" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -36.2134, 3.1215, 5.56135 )
use_collision = true
width = 1.0
height = 6.0
depth = 38.0
material = SubResource( 26 )

[node name="CSGBox6" type="CSGBox" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -30.2134, 3.1215, -5.43865 )
use_collision = true
width = 1.0
height = 6.0
depth = 38.0
material = SubResource( 27 )

[node name="CSGBox7" type="CSGBox" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5.21341, 3.1215, -5.43865 )
use_collision = true
width = 1.0
height = 6.0
depth = 38.0
material = SubResource( 28 )

[node name="CSGBox5" type="CSGBox" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -20, 3, -0.120315 )
use_collision = true
width = 3.0
height = 6.0
depth = 50.0
material = SubResource( 29 )

[node name="CSGSphere" type="CSGSphere" parent="Maze/CSGBox5"]
operation = 2
radius = 3.0
material = SubResource( 29 )

[node name="CSGBox3" type="CSGBox" parent="Maze"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 28, 3, 0 )
use_collision = true
width = 1.0
height = 6.0
depth = 50.0
material = SubResource( 24 )

[node name="CSGSphere" type="CSGSphere" parent="Maze/CSGBox3"]
operation = 2
radius = 3.0
material = SubResource( 24 )

[node name="Enemy" parent="." instance=ExtResource( 5 )]
transform = Transform( -0.193185, 0, 0.0517638, 0, 0.2, 0, -0.0517638, 0, -0.193185, 40, 0, 16 )

[node name="Player" type="KinematicBody" parent="."]
transform = Transform( -4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -49, 0, 0 )
script = ExtResource( 1 )

[node name="Body" type="CollisionShape" parent="Player"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 1.3, 0 )
shape = SubResource( 4 )

[node name="Feet" type="CollisionShape" parent="Player"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 1.3, 0.3 )
shape = SubResource( 5 )

[node name="Pivot" type="Spatial" parent="Player"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0 )

[node name="Camera" type="Camera" parent="Player/Pivot"]
current = true

[node name="UI" type="CanvasLayer" parent="."]

[node name="Menu" parent="UI" instance=ExtResource( 4 )]

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 7 )
autoplay = true

[node name="Key" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )

[node name="Robot" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )

[connection signal="body_entered" from="Maze/Exit" to="Maze/Exit" method="_on_Exit_body_entered"]
